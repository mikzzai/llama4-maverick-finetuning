# Detailed Guide to Publishing a Website on GitHub Pages

This is a step-by-step guide to publishing a website with instructions on fine-tuning Llama-4-Maverick on GitHub Pages.

## Contents

- [Prerequisites](#prerequisites)
- [Step 1: Creating a Repository on GitHub](#step-1-creating-a-repository-on-github)
- [Step 2: Setting Up a Local Repository](#step-2-setting-up-a-local-repository)
- [Step 3: Setting Up Authentication](#step-3-setting-up-authentication)
- [Step 4: Publishing Code on GitHub](#step-4-publishing-code-on-github)
- [Step 5: Setting Up GitHub Pages](#step-5-setting-up-github-pages)
- [Step 6: Verifying Publication](#step-6-verifying-publication)
- [Troubleshooting](#troubleshooting)

## Prerequisites

Before you begin, make sure you have:

1. A GitHub account
2. Git installed on your computer
3. Basic understanding of command line operations

## Step 1: Creating a Repository on GitHub

1. Go to [GitHub](https://github.com/) and log in to your account
2. Click the "+" button in the top right corner and select "New repository"
3. Fill out the repository creation form:
   - Repository name: `llama4-maverick-finetuning` (or any other name)
   - Description: `Guide to fine-tuning Llama-4-Maverick at home`
   - Visibility: Public (for GitHub Pages on a free account)
   - Do not initialize the repository with README, .gitignore, or license
4. Click "Create repository"

## Step 2: Setting Up a Local Repository

If you already have a local repository with the project, skip this step.

1. Create a directory for the project:
   ```bash
   mkdir llama4-maverick-finetuning
   cd llama4-maverick-finetuning
   ```

2. Initialize a Git repository:
   ```bash
   git init
   ```

3. Configure user data for Git:
   ```bash
   git config user.name "Your Name"
   git config user.email "your_email@example.com"
   ```

4. Create the basic project structure:
   ```bash
   mkdir -p css js img
   ```

5. Create the main files (index.html, css/style.css, js/script.js, README.md)

6. Add files to Git:
   ```bash
   git add .
   git commit -m "Initial commit"
   ```

## Step 3: Setting Up Authentication

GitHub no longer supports password authentication via HTTPS. Instead, you need to use a Personal Access Token or SSH keys.

### Option 1: Using a Personal Access Token (PAT)

1. **Create an access token on GitHub**:
   - Go to Settings -> Developer settings -> Personal access tokens -> Tokens (classic)
   - Click "Generate new token" -> "Generate new token (classic)"
   - Give the token a name (e.g., "Llama-4-Maverick repo")
   - Select scopes: at minimum, you need `repo` and `workflow`
   - Click "Generate token"
   - **Important**: Copy the token immediately, as you won't be able to see it again

2. **Configure Git to use the token**:
   ```bash
   git remote add origin https://USERNAME:YOUR_TOKEN@github.com/USERNAME/llama4-maverick-finetuning.git
   ```
   Replace `USERNAME` with your GitHub username and `YOUR_TOKEN` with the created token.

### Option 2: Using SSH Keys (recommended for permanent use)

1. **Check for existing SSH keys**:
   ```bash
   ls -la ~/.ssh
   ```

2. **If there are no keys, create them**:
   ```bash
   ssh-keygen -t ed25519 -C "your_email@example.com"
   ```
   (Just press Enter for all prompts to use the default values)

3. **Add the key to the SSH agent**:
   ```bash
   eval "$(ssh-agent -s)"
   ssh-add ~/.ssh/id_ed25519
   ```

4. **Copy the public key**:
   ```bash
   cat ~/.ssh/id_ed25519.pub
   ```
   (Copy the entire output)

5. **Add the key to GitHub**:
   - Go to Settings -> SSH and GPG keys -> New SSH key
   - Paste the copied key and give it a name
   - Click "Add SSH key"

6. **Configure Git to use SSH**:
   ```bash
   git remote add origin git@github.com:USERNAME/llama4-maverick-finetuning.git
   ```
   Replace `USERNAME` with your GitHub username.

## Step 4: Publishing Code on GitHub

1. Make sure you have a `.github/workflows/pages.yml` file for GitHub Actions:
   ```bash
   mkdir -p .github/workflows
   ```

2. Create a `.github/workflows/pages.yml` file with the following content:
   ```yaml
   name: Deploy to GitHub Pages

   on:
     push:
       branches: [ main ]
     workflow_dispatch:

   permissions:
     contents: read
     pages: write
     id-token: write

   concurrency:
     group: "pages"
     cancel-in-progress: true

   jobs:
     deploy:
       environment:
         name: github-pages
         url: ${{ steps.deployment.outputs.page_url }}
       runs-on: ubuntu-latest
       steps:
         - name: Checkout
           uses: actions/checkout@v3
         - name: Setup Pages
           uses: actions/configure-pages@v3
         - name: Upload artifact
           uses: actions/upload-pages-artifact@v1
           with:
             path: '.'
         - name: Deploy to GitHub Pages
           id: deployment
           uses: actions/deploy-pages@v1
   ```

3. Send the code to GitHub:
   ```bash
   git add .
   git commit -m "Add GitHub Pages workflow"
   git branch -M main
   git push -u origin main
   ```

## Step 5: Setting Up GitHub Pages

1. Go to your repository page on GitHub
2. Click on the "Settings" tab
3. In the left menu, select "Pages"
4. In the "Build and deployment" section:
   - Source: select "GitHub Actions"
   - GitHub will automatically detect the `.github/workflows/pages.yml` workflow file

5. Wait for the build and publication process to complete (usually takes a few minutes)

## Step 6: Verifying Publication

1. Return to the "Actions" tab of your repository
2. Check the status of the latest workflow run
3. If the workflow completed successfully, your site will be available at:
   ```
   https://USERNAME.github.io/llama4-maverick-finetuning/
   ```
   Replace `USERNAME` with your GitHub username.

4. Visit this URL to make sure your site has been successfully published

## Troubleshooting

### Problem: Authentication Error During Push

**Symptom**:
```
remote: Support for password authentication was removed on August 13, 2021.
remote: Please see https://docs.github.com/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.
fatal: Authentication failed for 'https://github.com/USERNAME/llama4-maverick-finetuning.git/'
```

**Solution**:
Use a Personal Access Token or SSH keys, as described in [Step 3](#step-3-setting-up-authentication).

### Problem: Site Not Publishing

**Symptom**: Workflow completes successfully, but the site is not accessible.

**Solution**:
1. Check that there is an `index.html` file in the root directory of the repository
2. Make sure the correct source is selected in the Pages settings (GitHub Actions)
3. Check the "Actions" tab for errors in the workflow
4. Wait for the publication process to complete (can take up to 10 minutes)

### Problem: Workflow Errors

**Symptom**: Workflow completes with an error.

**Solution**:
1. Check the contents of the `.github/workflows/pages.yml` file
2. Make sure you have the correct permissions for the repository
3. Check the error logs in the Actions section

### Problem: Changes Not Displaying on the Site

**Symptom**: You've made changes, but they don't appear on the published site.

**Solution**:
1. Make sure you've committed and pushed the changes to the `main` branch
2. Check that the workflow has started and completed successfully
3. Clear your browser cache or open the site in incognito mode

## Additional Resources

- [Official GitHub Pages Documentation](https://docs.github.com/en/pages)
- [GitHub Actions Documentation](https://docs.github.com/en/actions)
- [Git Guide](https://git-scm.com/book/en/v2)
